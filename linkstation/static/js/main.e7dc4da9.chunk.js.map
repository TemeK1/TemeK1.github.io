{"version":3,"sources":["Device.js","stations.js","devices.js","App.js","serviceWorker.js","index.js"],"names":["Device","props","bestStation","bind","calcPower","calcDistance","candidateStation","candidatePower","this","stations","station","distance","x","y","reach","power","Math","pow","x1","x2","y1","y2","sqrt","stationAndPower","result","toFixed","React","Component","linkStations","devices","App","clonedStations","clonedDevices","s","push","JSON","parse","stringify","d","state","aDevices","key","className","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.e7dc4da9.chunk.js","sourcesContent":["import React from 'react';\r\n\r\n/*\r\n* Device-component is responsible for a single device.\r\n*/\r\nclass Device extends React.Component {\r\n  constructor(props) {\r\n    super(props);\r\n\r\n    //binding the functions\r\n    this.bestStation = this.bestStation.bind(this);\r\n    this.calcPower = this.calcPower.bind(this);\r\n    this.calcDistance = this.calcDistance.bind(this);\r\n  }\r\n\r\n  /*\r\n  * Seeking for the best possible station (power-wise) to connect this device on.\r\n  */\r\n  bestStation() {\r\n    //no candidates unless otherwise proven\r\n    let candidateStation = null,\r\n        //proto-power, safe to assume it's 0 at least.\r\n        candidatePower = 0;\r\n\r\n    //iterates through all the stations to search for the best.\r\n    for (let station of this.props.stations) {\r\n      let distance = this.calcDistance(station.x, this.props.x, station.y, this.props.y);\r\n      //to check if distance between the station and device is smaller or at least equal to station's reach.\r\n      if (distance <= station.reach) {\r\n        //if distance is OK, we can calculate the power.\r\n        let power = this.calcPower(station.reach, distance);\r\n        //if power is greater than in the old candidate, we shall update.\r\n        if (power > candidatePower) {\r\n          candidatePower = power;\r\n          candidateStation = station;\r\n        }\r\n      }\r\n    }\r\n    //most powerful station and it's power.\r\n    return {\"station\": candidateStation, \"power\": candidatePower};\r\n  }\r\n\r\n  /*\r\n  * Simply calculates the power based on two parameters:\r\n  * @param reach: reach of a linkstation.\r\n  * @param distance: distance between two points (linkstation and device)\r\n  * @returns {Float} returns power\r\n  */\r\n  calcPower(reach, distance) {\r\n    return Math.pow(reach - distance, 2);\r\n  }\r\n\r\n  /*\r\n  * Simply calculates the distance between two points:\r\n  * @param x1 x-coordinate of point 1\r\n  * @param x2 x-coordinate of point 2\r\n  * @param y1 y-coordinate of point 1\r\n  * @param y2 y-coordinate of point 2\r\n  * @returns {Float} returns distance\r\n  */\r\n  calcDistance(x1,x2,y1,y2) {\r\n    return Math.sqrt(Math.pow(x2 - x1, 2) + Math.pow(y2 - y1, 2));\r\n  }\r\n\r\n  render() {\r\n    //seeking for the best station\r\n    let stationAndPower = this.bestStation();\r\n    let x1 = this.props.x,\r\n        y1 = this.props.y,\r\n        result = null;\r\n\r\n    //if at least one suitable station is found\r\n    if (stationAndPower.station !== null) {\r\n      let x2 = stationAndPower.station.x,\r\n          y2 = stationAndPower.station.y;\r\n\r\n      result = `Best link station for point ${x1},${y1} is ${x2},${y2} with power ${stationAndPower.power.toFixed(2)}`;\r\n    } else {\r\n      result = `No link station within reach for point ${x1},${y1}`;\r\n    }\r\n    return(<p>{result}</p>);\r\n  }\r\n}\r\n\r\nexport default Device;\r\n","export var linkStations = [\r\n{\r\n  \"x\": 0,\r\n  \"y\": 0,\r\n  \"reach\": 10\r\n},\r\n{\r\n  \"x\": 20,\r\n  \"y\": 20,\r\n  \"reach\": 5\r\n},\r\n{\r\n  \"x\": 10,\r\n  \"y\": 0,\r\n  \"reach\": 12\r\n}]\r\n","export var devices = [\r\n{\r\n  \"x\": 0,\r\n  \"y\": 0\r\n},\r\n{\r\n  \"x\": 100,\r\n  \"y\": 100\r\n},\r\n{\r\n  \"x\": 15,\r\n  \"y\": 10\r\n},\r\n{\r\n  \"x\": 18,\r\n  \"y\": 18\r\n}]\r\n","import React from 'react';\nimport Device from './Device.js';\nimport './App.css';\nimport {linkStations} from './stations.js';\nimport {devices} from './devices.js';\n\n/*\n* Linkstations react-app.\n* App component is responsible for fetching the necessary data,\n* linkStations and devices, and for parenting of the Device-components.\n* Extension points are left for future reference, in case something more interactive\n* will be needed, e.g. state is not currently being set again after initiliazing phase.\n*\n* Use npm run build to build a production version, and then place\n* build-folder to the web-server.\n* Absolute homepage is set in package.json, so take care to check that.\n*/\nclass App extends React.Component {\n  constructor(props) {\n    super(props);\n    let clonedStations = [],\n        clonedDevices = [];\n\n    //making full clones of the objects, to be sure that nothing funny and weird happens due to references to original objects,\n    //\"break and bake\", because these will be set into the state of the component.\n    for (let s of linkStations) {\n      clonedStations.push(JSON.parse(JSON.stringify(s)));\n    }\n\n    //same than above commentary.\n    for (let d of devices) {\n      clonedDevices.push(JSON.parse(JSON.stringify(d)));\n    }\n\n    this.state = {\n      \"stations\": clonedStations,\n      \"devices\": clonedDevices\n    }\n  }\n\n  render() {\n\n    let aDevices = [];\n    //iterating through all the devices, and creating Device child-elements.\n    for (let d of this.state.devices) {\n      //passing necessary props\n      aDevices.push(<Device key={d.x + d.y} x={d.x} y={d.y} stations={this.state.stations} />);\n    }\n\n    return (\n      <div className=\"App\">\n        {aDevices}\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}