{"version":3,"sources":["Image.js","Thumbnail.js","Skeleton.js","Specimen.js","Exam.js","Species.js","App.js","serviceWorker.js","index.js"],"names":["Image","path","this","props","folder","src","className","title","alt","React","Component","Thumbnail","Skeleton","id","text","style","border","left","top","width","height","position","textAlign","opacity","zIndex","Specimen","state","name","length","click","bind","handleChange","helpWithName","showTip","reset","index","pictures","setState","counter","tips","tip","tipVisible","updateItem","shouldIGiveLetter","giveLetter","help","substr","answer","e","obj","target","value","correct","n","toLowerCase","trim","localeCompare","setCustomValidity","preventDefault","map","item","key","thumbnails","onClick","order","tipText","skeleton","exam","description","type","minLength","onChange","required","Exam","speciesData","JSON","parse","stringify","data","Math","floor","random","categories","specimenId","species","category","pictureInt","rndSpecimen","rndOrder","seconds","time","timerBackgroundColor","timePerQuestion","questions","questionCounter","answers","timer","handleAnswer","handleSubmit","startTimer","countDown","getSpecimen","registerReset","setInterval","secs","divisor_for_minutes","divisor_for_seconds","ceil","timeLeftVar","secondsToTime","clearInterval","newstate","specimen","m","s","question","specimenElement","backgroundColor","Species","configuration","conf","parseSpecies","parseCategories","parseOrders","startExam","switchCategory","switchOrder","d","push","i","orders","examMode","showExamIntro","pictureSkeleton","timePerExam","page","examIntro","questionsInTrial","App","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.832d872d.chunk.js","sourcesContent":["import React from 'react';\nimport './App.css';\n\nclass Image extends React.Component {\n  //constructor(props) {\n  //  super(props);\n  //}\n\n//)async componentDidMount() {\n//)  try {\n//)      //Assign the promise unresolved first then get the data using the json method.\n//)      const aboutCall = await fetch('data.json');\n//)      const result = await aboutCall.json();\n//)      console.log(result[\"0\"]);\n//)      this.setState({data: result});\n//)  } catch(err) {\n//)    console.log(data);\n//)      console.log(\"Error fetching data\");\n//)  }\n//)}\n\n  render() {\n    //<img key={id} src={src} title={title} alt={description}\n    let path = this.props.path + this.props.folder + this.props.src;\n    return (\n      <div><img className=\"Species\" src={path} title={this.props.title} alt={this.props.title}/></div>)\n  }\n}\n\nexport default Image;\n","import React from 'react';\nimport './App.css';\n\nclass Thumbnail extends React.Component {\n  //constructor(props) {\n  //  super(props);\n  //}\n\n//)async componentDidMount() {\n//)  try {\n//)      //Assign the promise unresolved first then get the data using the json method.\n//)      const aboutCall = await fetch('data.json');\n//)      const result = await aboutCall.json();\n//)      console.log(result[\"0\"]);\n//)      this.setState({data: result});\n//)  } catch(err) {\n//)    console.log(data);\n//)      console.log(\"Error fetching data\");\n//)  }\n//)}\n\n  render() {\n    //<img key={id} src={src} title={title} alt={description}\n    let path = this.props.path + this.props.folder + this.props.src;\n    return (\n      <div><img className=\"Thumbnail\" src={path} title={this.props.title} alt={this.props.title}/></div>)\n  }\n}\n\nexport default Thumbnail;\n","import React from 'react';\nimport './App.css';\n\nclass Skeleton extends React.Component {\n  //constructor(props) {\n  //  super(props);\n  //}\n\n  render() {\n    return (\n      <div>\n      <p className=\"SkeletonParagraph\">{this.props.id + 1}. {this.props.text}</p>\n      <div className=\"Skeleton\"\n      style={{\n        border: \"0.1em dashed orange\",\n        left: this.props.left + 'vw',\n        top: this.props.top + 'vh',\n         width: this.props.width + 'vw',\n         height: this.props.height + 'vh',\n         position: 'absolute',\n         textAlign: \"left\",\n         opacity: 1,\n         zIndex: 3}}>\n         {this.props.id +1}.\n         </div></div>)\n  }\n}\n\nexport default Skeleton;\n","import React from 'react';\nimport Image from './Image.js';\nimport Thumbnail from './Thumbnail.js';\nimport Skeleton from './Skeleton.js';\nimport './App.css';\n\nclass Specimen extends React.Component {\n  constructor(props) {\n    super(props);\n\n    this.state = {\n      \"counter\": 0,\n      \"answer\": \"\",\n      \"correct\": false,\n      \"tipVisible\": false,\n      \"tip\": 0,\n      \"shouldIGiveLetter\": false,\n      \"giveLetter\": this.props.name[0].length -1\n    }\n\n    this.click = this.click.bind(this);\n    this.handleChange = this.handleChange.bind(this);\n    this.helpWithName = this.helpWithName.bind(this);\n    this.showTip = this.showTip.bind(this);\n    this.reset = this.reset.bind(this);\n\n    this.props.reset(this.reset);\n  }\n\n  click(index) {\n    if (index <= this.props.pictures.length - 1) {\n      this.setState({counter: index});\n    }\n  }\n\n  showTip() {\n    if (!this.props.tips) return;\n    if (this.state.tip < this.props.tips.length && this.state.tipVisible === false) {\n      this.setState({tipVisible: true}, function () { this.updateItem(this.state); }.bind(this));\n      return;\n    }\n\n    if (this.state.tip < this.props.tips.length && this.state.tipVisible === true) {\n      this.setState({tip: this.state.tip + 1}, function () { this.updateItem(this.state); }.bind(this));\n      return;\n    } else {\n      this.setState({tipVisible: false, tip: 0, shouldIGiveLetter: true}, function () { this.updateItem(this.state); }.bind(this));\n    }\n  }\n\n  helpWithName() {\n    if (this.state.giveLetter < 0) return;\n    let help = this.props.name[0].substr(this.state.giveLetter, this.props.name[0].length);\n    this.setState({answer: help, giveLetter: this.state.giveLetter -1}, function () { this.updateItem(this.state); }.bind(this));\n  }\n\n  handleChange(e) {\n    let obj = e.target;\n    let value = obj.value;\n    let correct = false;\n    if (obj.name === \"answer\") {\n      this.setState({answer: value});\n      for (let n of this.props.name) {\n        if ((value.toLowerCase().trim().localeCompare(n)) === 0) {\n          obj.setCustomValidity(\"\");\n          correct = true;\n          break;\n        } else {\n          correct = false;\n          obj.setCustomValidity(\"Väärä nimi\");\n        }\n      }\n    }\n    if (correct !== this.state.correct) {\n      this.setState({correct: correct}, function () { this.updateItem(this.state); }.bind(this));\n    }\n  }\n\n  handleSubmit(e) {\n    e.preventDefault();\n  }\n\n  updateItem() {\n   this.setState(this.state);\n  }\n\n  reset() {\n    this.setState({counter: 0, answer: \"\", correct: false, tipVisible: false, tip: 0, shouldIGiveLetter: false, giveLetter: this.props.name[0].length -1}, function () { this.updateItem(this.state); }.bind(this));\n  }\n\n  render() {\n    const pictures = this.props.pictures.map(item => {return <Image\n      key={item}\n      id={this.props.id}\n      title={this.props.id}\n      path={this.props.path}\n      folder={this.props.folder}\n      src={item} />});\n\n    const thumbnails = this.props.thumbnails.map((item, index) => {return <div key={\"t_\" + item} onClick={() => this.click(index)}><Thumbnail\n      style={{order: index}}\n      id={this.props.id}\n      title={this.props.id}\n      path={this.props.path}\n      folder={this.props.folder}\n      src={item} /></div>});\n\n    const skeletons = this.props.skeleton && !this.props.exam ? this.props.skeleton.map((item, index) => {return <Skeleton\n      id={index}\n      left={item.left}\n      top={item.top}\n      width={item.width}\n      height={item.height}\n      text={item.text}/>}) : \"\";\n\n    let tipText = this.props.tips && !this.props.exam && !this.state.shouldIGiveLetter ? <div className=\"Tip\" onClick={() => this.showTip()}><p>Näytä vihje</p></div> : \"\";\n    let tip = this.props.tips && this.state.tipVisible && !this.props.exam ? this.props.tips[this.state.tip] : \"\";\n    let shouldIGiveLetter = this.state.shouldIGiveLetter && !this.props.exam ? <div onClick={() => this.helpWithName()} className=\"NameHelp\"><p>Klikkaile, jos tarvitset apua nimen kanssa.</p></div> : <div><p></p></div>;\n\n    //let correct = this.state.correct ? 'true': 'false';\n    //const images = this.state.data.map(item => {return <Image key={item.id} id={item.id} title={item.id} alt={item.description} src={item.src} path={this.state.configuration.path} />});\n    //{skeletons[this.state.counter]}\n    //<img key={id} src={src} title={title} alt={description}\n    return (\n      <div>\n      <div className=\"Pictures\">\n      {pictures[this.state.counter]}\n      </div>\n      <div className=\"Thumbnails\">{thumbnails}</div>\n      <div className=\"Specimen\">\n      <p className=\"description\">{this.props.description}</p>\n      <p><label>Mikä laji on kyseessä? <input type=\"text\" minLength=\"2\" name=\"answer\" value = {this.state.answer} onChange={this.handleChange} required=\"required\"/></label></p>\n      {tipText}\n      <p>{tip}</p>\n      {shouldIGiveLetter}\n      </div>\n      </div>\n  );\n  }\n}\n\nexport default Specimen;\n","import React from 'react';\nimport Specimen from './Specimen.js';\nimport Image from './Image.js';\nimport Thumbnail from './Thumbnail.js';\nimport './App.css';\nimport data from './data/data.json';\n\nclass Exam extends React.Component {\n  constructor(props) {\n    super(props);\n    let speciesData = JSON.parse(JSON.stringify(data));\n    let order = Math.floor(Math.random() * speciesData.categories[0].order.length);\n    let specimenId = Math.floor(Math.random() * speciesData.categories[0].order[order].species.length);\n\n    this.state = {\n      answer: \"\",\n      category: 0,\n      counter: 0,\n      data: speciesData,\n      pictureInt: 0,\n      rndSpecimen: specimenId,\n      rndOrder: order,\n      reset: null,\n      seconds: this.props.time,\n      time: {},\n      timerBackgroundColor: \"blue\",\n      timePerQuestion: this.props.timePerQuestion,\n      questions: this.props.questions,\n      questionCounter: 0,\n      answers: []\n    }\n\n    this.timer = 0;\n    this.click = this.click.bind(this);\n    this.handleAnswer = this.handleAnswer.bind(this);\n    this.handleSubmit = this.handleSubmit.bind(this);\n    this.startTimer = this.startTimer.bind(this);\n    this.countDown = this.countDown.bind(this);\n    this.getSpecimen = this.getSpecimen.bind(this);\n    this.registerReset = this.registerReset.bind(this);\n\n    if (this.timer == 0 && this.state.seconds > 0) {\n      this.timer = setInterval(this.countDown, 1000);\n    }\n  }\n\n  secondsToTime(secs){\n    let hours = Math.floor(secs / (60 * 60));\n\n    let divisor_for_minutes = secs % (60 * 60);\n    let minutes = Math.floor(divisor_for_minutes / 60);\n\n    let divisor_for_seconds = divisor_for_minutes % 60;\n    let seconds = Math.ceil(divisor_for_seconds);\n\n    let obj = {\n      \"h\": hours,\n      \"m\": minutes,\n      \"s\": seconds\n    };\n    return obj;\n  }\n\n  componentDidMount() {\n    let timeLeftVar = this.secondsToTime(this.state.seconds);\n    this.setState({ time: timeLeftVar});\n  }\n\n  click(index) {\n    this.setState({counter: index});\n  }\n\n  startTimer() {\n    if (this.timer == 0 && this.state.seconds > 0) {\n      this.timer = setInterval(this.countDown, 1000);\n    }\n  }\n\n  countDown() {\n    // Remove one second, set state so a re-render happens.\n    let seconds = this.state.seconds - 1;\n    this.setState({\n      time: this.secondsToTime(seconds),\n      seconds: seconds,\n    });\n\n    // Check if we're at zero.\n    if (seconds == 0) {\n      clearInterval(this.timer);\n      this.setState({\n        timerBackgroundColor: \"red\"\n      });\n    }\n  }\n\n  handleAnswer(e) {\n    let obj = e.target;\n    let value = obj.value;\n    let correct = false;\n    if (obj.name === \"answer\") {\n      this.setState({answer: value});\n      for (let n of this.state.data.categories[this.state.category].order[this.state.rndOrder].species[this.state.rndSpecimen].name) {\n        if ((value.toLowerCase().trim().localeCompare(n)) === 0) {\n          obj.setCustomValidity(\"\");\n          correct = true;\n          break;\n        } else {\n          correct = false;\n          obj.setCustomValidity(\"Väärä nimi\");\n        }\n      }\n    }\n    if (correct !== this.state.correct) {\n      this.setState({correct: correct}, function () { this.updateItem(this.state); }.bind(this));\n    }\n  }\n\n  handleSubmit(e) {\n    e.preventDefault();\n    if ((this.state.questionCounter - this.state.questions) == 1) return;\n    let answers = JSON.parse(JSON.stringify(this.state.answers));\n    let newstate = {};\n    if (this.state.correct === true) {\n      answers[this.state.questionCounter] = true;\n    } else {\n      answers[this.state.questionCounter] = false;\n    }\n    newstate.answers = answers;\n    newstate.answer = \"\";\n    if (this.state.questionCounter < this.state.questions) {\n      newstate.questionCounter = this.state.questionCounter + 1;\n    }\n    let order = Math.floor(Math.random() * this.state.data.categories[this.state.category].order.length);\n    newstate.rndOrder = order;\n    newstate.rndSpecimen = Math.floor(Math.random() * this.state.data.categories[this.state.category].order[order].species.length);\n    this.setState(newstate, function () { this.updateItem(this.state); }.bind(this));\n  }\n\n  getSpecimen() {\n    //let order = Math.floor(Math.random() * this.state.data.categories[this.state.category].order.length);\n    //let specimenId = Math.floor(Math.random() * this.state.data.categories[this.state.category].order[order].species.length);\n    let specimen = JSON.parse(JSON.stringify(this.state.data.categories[this.state.category].order[this.state.rndOrder].species[this.state.rndSpecimen]));\n    specimen.folder = this.state.data.categories[this.state.category].order[this.state.rndOrder].folder;\n    return specimen;\n  }\n\n  registerReset(reset) {\n    this.setState({reset: reset});\n  }\n\n  updateItem() {\n    this.setState(this.state);\n  }\n\n  render() {\n    const time = this.state.time.m == 0 && this.state.time.s == 0 ? <div>Koe on ohi</div>: \"\";\n    const question = <div>Tehtävä {this.state.questionCounter + 1}.</div>\n\n    const specimen = this.getSpecimen();\n\n    const pictures = specimen.pictures.map(item => {return <Image\n      key={item}\n      id={this.props.id}\n      title={this.props.id}\n      path={this.props.path}\n      folder={specimen.folder}\n      src={item} />});\n\n    const thumbnails = specimen.thumbnails.map((item, index) => {return <div key={\"t_\" + item} onClick={() => this.click(index)}><Thumbnail\n      style={{order: index}}\n      id={this.props.id}\n      title={this.props.id}\n      path={this.props.path}\n      folder={specimen.folder}\n      src={item} /></div>});\n\n    const specimenElement =\n          <div>\n          <div className=\"Pictures\">\n          {pictures[this.state.counter]}\n          </div>\n          <div className=\"Thumbnails\">{thumbnails}</div>\n          <div className=\"Specimen\">\n          <p className=\"description\">{specimen.description}</p>\n          <p><label>Lajin suomenkielinen nimi <input type=\"text\" minLength=\"2\" name=\"answer\" value ={this.state.answer} onChange={this.handleAnswer} required=\"required\"/></label></p>\n          <p><label>Lajin tieteellinen nimi <input type=\"text\" minLength=\"2\" name=\"answer\" value ={this.state.answer} onChange={this.handleAnswer} required=\"required\"/></label></p>\n          <p><button onClick={this.handleSubmit}>Vastaa</button></p>\n          </div>\n          </div>;\n\n\n    return (\n      <div>\n      <div className=\"Timer\" style={{backgroundColor: this.state.timerBackgroundColor}}>Tenttiaikaa jäljellä <strong>{this.state.time.m} minuuttia</strong> ja <strong>{this.state.time.s} sekuntia</strong>\n      {time}\n      </div>\n      <div className=\"Content Exam\">\n      {question} {specimenElement}\n      </div></div>)\n  }\n}\n\nexport default Exam;\n","import React from 'react';\nimport Specimen from './Specimen.js';\nimport Exam from './Exam.js';\nimport data from './data/data.json';\nimport conf from './data/configuration.json';\nimport './App.css';\n\nclass Species extends React.Component {\n  constructor(props) {\n    super(props);\n    let speciesData = JSON.parse(JSON.stringify(data));\n    let configuration = JSON.parse(JSON.stringify(conf));\n\n    this.state = {\n      \"data\": speciesData,\n      \"configuration\": configuration,\n      \"counter\": 0,\n      \"category\": 0,\n      \"order\": 0,\n      \"examMode\": false,\n      \"showExamIntro\": false,\n      \"examIntro\": \"Tämän harjoitustentin tarkoitus on simuloida selkärankaisten lajintuntemusten oikeaa tenttitilannetta. Tämä on vain sinun omaksi hyödyksi ja opiksi, joten apuvälineiden käytössä ei ole mitään mieltä. Isoilla ja pienillä kirjaimilla ei ole väliä.\",\n      \"reset\": null\n    }\n\n    this.exam = this.exam.bind(this);\n    this.parseSpecies = this.parseSpecies.bind(this);\n    this.parseCategories = this.parseCategories.bind(this);\n    this.parseOrders = this.parseOrders.bind(this);\n    this.click = this.click.bind(this);\n    this.startExam = this.startExam.bind(this);\n    this.switchCategory = this.switchCategory.bind(this);\n    this.switchOrder = this.switchOrder.bind(this);\n    this.registerReset = this.registerReset.bind(this);\n  }\n\n  parseSpecies() {\n    let species = [];\n\n    for (let d of data) {\n      species.push(JSON.parse(JSON.stringify(d)));\n    }\n    return species;\n  }\n\n  parseCategories() {\n    let categories = [];\n\n    for (let i = 0; i < this.state.data.categories.length; i++) {\n      if (i === this.state.category) {\n        categories.push(<div onClick={() => this.switchCategory(i)} key={i} className=\"Category Active\">{this.state.data.categories[i].name}</div>);\n      } else {\n        categories.push(<div onClick={() => this.switchCategory(i)} key={i} className=\"Category\">{this.state.data.categories[i].name}</div>);\n      }\n    }\n    return categories;\n  }\n\n  parseOrders() {\n    let orders = [];\n\n    for (let i = 0; i < this.state.data.categories[this.state.category].order.length; i++) {\n      if (i === this.state.order && this.state.examMode === false) {\n        orders.push(<div onClick={() => this.switchOrder(i)} key={i} className=\"Order Active\">{this.state.data.categories[this.state.category].order[i].name}</div>);\n      } else {\n        orders.push(<div onClick={() => this.switchOrder(i)} key={i} className=\"Order\">{this.state.data.categories[this.state.category].order[i].name}</div>);\n      }\n    }\n    return orders;\n  }\n\n  click(i) {\n    if (!this.state.data.categories[this.state.category].order[this.state.order]) return;\n    if (i === 1) {\n      if (this.state.counter < (this.state.data.categories[this.state.category].order[this.state.order].species.length -1)) {\n        this.setState({counter: this.state.counter +1});\n        this.state.reset();\n      }\n    } else {\n      if (this.state.counter > 0) {\n        this.setState({counter: this.state.counter -1});\n        this.state.reset();\n      }\n    }\n\n  }\n\n  switchCategory(i) {\n    if (this.state.examMode === true) return;\n    this.setState({category: i, order: 0, counter: 0});\n    this.state.reset();\n  }\n\n  switchOrder(i) {\n    if (this.state.examMode === true) return;\n    this.setState({order: i, counter: 0});\n    this.state.reset();\n  }\n\n//)async componentDidMount() {\n//)  try {\n//)      //Assign the promise unresolved first then get the data using the json method.\n//)      const aboutCall = await fetch('data.json');\n//)      const result = await aboutCall.json();\n//)      console.log(result[\"0\"]);\n//)      this.setState({data: result});\n//)  } catch(err) {\n//)    console.log(data);\n//)      console.log(\"Error fetching data\");\n//)  }\n//)}\n\n  registerReset(reset) {\n    this.setState({reset: reset});\n  }\n\n  exam() {\n    this.state.reset();\n    this.setState({showExamIntro: true, examMode: false});\n  }\n\n  startExam() {\n    this.setState({showExamIntro: false, examMode: true}, function () { this.updateItem(this.state); }.bind(this));\n  }\n\n  updateItem() {\n   this.setState(this.state);\n  }\n\n  render() {\n    const categories = this.parseCategories();\n    const orders = this.parseOrders();\n    let specimen = null;\n    let order = this.state.data.categories[this.state.category].order[this.state.order];\n    if (this.state.data.categories[this.state.category].order[this.state.order]) {\n      specimen = <div>\n      <Specimen\n      pictures={order.species[this.state.counter].pictures}\n      thumbnails={order.species[this.state.counter].thumbnails}\n      id={order.species[this.state.counter].id}\n      name={order.species[this.state.counter].name}\n      description={order.species[this.state.counter].description}\n      skeleton={order.species[this.state.counter].pictureSkeleton}\n      tips={order.species[this.state.counter].tips}\n      folder={order.folder}\n      path={this.state.configuration.path}\n      exam={this.state.examMode}\n      reset={this.registerReset}/></div>;\n    }\n\n    const timePerQuestion = this.state.configuration.timePerQuestion/60;\n    const timePerExam = this.state.configuration.timePerExam/60;\n\n    const page = !this.state.showExamIntro ?\n      <div>\n      <div className=\"Categories\">\n      {categories}\n      </div>\n      <div className=\"Orders\">\n      {this.state.examMode === false ? <div onClick={() => this.exam()} className=\"StartExam\">Harjoituskoe</div> : <div className=\"StartedExam\">Harjoituskoe</div>}\n      {orders}\n      </div>\n      {this.state.examMode === false ?\n      <div>\n      <div className=\"Arrows\">\n      <div className=\"Next\" onClick={() => this.click(1)}><p>Seuraava laji</p></div>\n      <div className=\"Previous\" onClick={() => this.click(-1)}><p>Edellinen laji</p></div>\n      </div>\n      <div className=\"Content\">\n      {specimen}\n      </div>\n      <div className=\"Arrows\">\n      <div className=\"Next\" onClick={() => this.click(1)}><p>Seuraava laji</p></div>\n      <div className=\"Previous\" onClick={() => this.click(-1)}><p>Edellinen laji</p></div>\n      </div>\n      </div>\n      : <Exam questions={this.state.configuration.questionsInTrial} path={this.state.configuration.path} timePerQuestion={this.state.configuration.timePerQuestion} time={this.state.configuration.timePerExam} />}\n      </div> :\n\n      <div className=\"Content\">\n      <h3>Harjoitustentti - Selkärankaisten lajintuntemus</h3>\n      {this.state.examIntro}\n      <div>\n      <p>Kysymyksiä yhteensä: {this.state.configuration.questionsInTrial}</p>\n      <p>Aikaa per kysymys: {timePerQuestion} minuuttia</p>\n      <p>Aikaa per tentti: {timePerExam} minuuttia</p>\n      <div className=\"StartButton\" onClick={() => this.startExam()}>Aloita tentti</div>\n      </div>\n      </div>;\n\n\n    //<img key={id} src={src} title={title} alt={description}\n    return (\n    <div>{page}</div>\n  );\n  }\n}\n\nexport default Species;\n","import React from 'react';\nimport Species from './Species.js';\nimport './App.css';\n\nclass App extends React.Component {\n\n  render() {\n    return (\n      <div className=\"App\">\n        <Species />\n      </div>\n  );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}